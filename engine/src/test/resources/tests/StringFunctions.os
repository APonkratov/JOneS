Перем ЮнитТестирование;

Функция ПолучитьСписокТестов(Тестировщик) Экспорт
	ЮнитТестирование = Тестировщик;

	ВсеТесты = Новый Массив;
	ВсеТесты.Добавить("ТестДолжен_ПроверитьСокрП");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьСокрЛ");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьСокрЛП");

	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрРазделить_НаКириллице");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрРазделить_НаЛатинице");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрРазделить_СПустойСтрокой");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрРазделить_СПустойСтрокойРазделителя");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрРазделить_РазделениеБезПустых");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрРазделить_РазделениеСПустыми");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрРазделить_СПустойСтрокойБезПустых");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрРазделить_Авторазделение");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрРазделить_ПараметрыНеЗаданы");

	Возврат ВсеТесты;
КонецФункции

&Тест
Процедура ТестДолжен_ПроверитьСокрП() Экспорт

    Значение = "Значение  ";
    НовоеЗначение = СокрП(Значение);
    ЮнитТестирование.ПроверитьРавенство(НовоеЗначение, "Значение");

    Значение = "  Значение";
    НовоеЗначение = СокрП(Значение);
    ЮнитТестирование.ПроверитьРавенство(НовоеЗначение, Значение);

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьСокрЛ() Экспорт

    Значение = "  Значение";
    НовоеЗначение = СокрЛ(Значение);
    ЮнитТестирование.ПроверитьРавенство(НовоеЗначение, "Значение");

    Значение = "Значение  ";
    НовоеЗначение = СокрЛ(Значение);
    ЮнитТестирование.ПроверитьРавенство(НовоеЗначение, Значение);

КонецПроцедуры

&Тест
Процедура ТестДолжен_ПроверитьСокрЛП() Экспорт
    Значение = "  Значение  ";
    НовоеЗначение = СокрЛП(Значение);
    ЮнитТестирование.ПроверитьРавенство(НовоеЗначение, "Значение");

    Значение = "Значение  ";
    НовоеЗначение = СокрЛП(Значение);
    ЮнитТестирование.ПроверитьРавенство(НовоеЗначение, "Значение");

    Значение = "  Значение";
    НовоеЗначение = СокрЛП(Значение);
    ЮнитТестирование.ПроверитьРавенство(НовоеЗначение, "Значение");
КонецПроцедуры

Процедура ТестДолжен_ВызватьМетод_СтрРазделить_НаКириллице() Экспорт
	//arrange
	//act
	мРезультат = СтрРазделить("0,1,2,3,4,5", ",");
	//assert
	ЮнитТестирование.ПроверитьРавенство(6, мРезультат.Количество());
КонецПроцедуры

Процедура ТестДолжен_ВызватьМетод_СтрРазделить_НаЛатинице() Экспорт
	//arrange
	//act
	мРезультат = StrSplit("0,1,2,3,4,5", ",");
	//assert
	ЮнитТестирование.ПроверитьРавенство(6, мРезультат.Количество());
КонецПроцедуры

Процедура ТестДолжен_ВызватьМетод_СтрРазделить_СПустойСтрокой() Экспорт
	ТекстОшибки = "";
	//arrange
	//act
		мРезультат = СтрРазделить("", ",");
	//assert
	ЮнитТестирование.ПроверитьРавенство(1, мРезультат.Количество());
КонецПроцедуры

Процедура ТестДолжен_ВызватьМетод_СтрРазделить_СПустойСтрокойБезПустых() Экспорт
	ТекстОшибки = "";
	//arrange
	//act
		мРезультат = СтрРазделить("", ",", ложь);
	//assert
	ЮнитТестирование.ПроверитьРавенство(0, мРезультат.Количество());
КонецПроцедуры

Процедура ТестДолжен_ВызватьМетод_СтрРазделить_СПустойСтрокойРазделителя() Экспорт
	ТекстОшибки = "";
	//arrange
	//act
	Попытка
		мРезультат = СтрРазделить("0,1,2,3,4,5", "");
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	//assert
	ЮнитТестирование.ПроверитьРавенство("0,1,2,3,4,5", мРезультат[0]);
КонецПроцедуры

Процедура ТестДолжен_ВызватьМетод_СтрРазделить_РазделениеБезПустых() Экспорт
	//arrange
	//act
		мРезультат = СтрРазделить("0,1,2,,4,5", ",", Ложь);
	//assert
	ЮнитТестирование.ПроверитьРавенство(5, мРезультат.Количество());
КонецПроцедуры

Процедура ТестДолжен_ВызватьМетод_СтрРазделить_РазделениеСПустыми() Экспорт
	//arrange
	//act
	мРезультат = СтрРазделить("0,1,2,,4,5", ",", Истина);
	//assert
	ЮнитТестирование.ПроверитьРавенство(6, мРезультат.Количество());
КонецПроцедуры

Процедура ТестДолжен_ВызватьМетод_СтрРазделить_Авторазделение() Экспорт
	//arrange
	//act
	мРезультат = СтрРазделить("0,1,2,,4,5", ",");
	//assert
	ЮнитТестирование.ПроверитьРавенство(6, мРезультат.Количество());
КонецПроцедуры

Процедура ТестДолжен_ВызватьМетод_СтрРазделить_ПараметрыНеЗаданы() Экспорт
	ТекстОшибки = "";
	//arrange
	//act
	Попытка
		мРезультат = СтрРазделить(Неопределено, Неопределено);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	//assert
	ЮнитТестирование.ПроверитьРавенство(1, мРезультат.Количество());
КонецПроцедуры
